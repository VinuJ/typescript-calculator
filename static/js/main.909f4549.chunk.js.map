{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","expression","setExpression","answer","setAnswer","isOperator","symbol","test","display","current","length","slice","count","i","isNaN","temp","split","lastNumber","replace","calculate","eval","clearAll","clear","substring","className","type","value","placeholder","disabled","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.909f4549.chunk.js","sourcesContent":["import React, { FC, useState } from \"react\";\r\nimport \"./App.scss\";\r\n\r\nconst App: FC = () => {\r\n  const [expression, setExpression] = useState<string>(\"\");\r\n  const [answer, setAnswer] = useState<number | string>(0);\r\n\r\n  const isOperator = (symbol: string): boolean => {\r\n    return /[\\+\\*\\/\\-]/.test(symbol);\r\n  };\r\n\r\n  const display = (symbol: string): void => {\r\n    let current = expression;\r\n\r\n    // Check if two operators in a row have been inputted\r\n    if (isOperator(symbol) && isOperator(current[current.length - 1])) {\r\n      let newExp;\r\n      // Check for subtract sign allows for '5 * -5' to correctly evaluate to '-25'\r\n      if (/[-]/.test(symbol)) {\r\n        setExpression(current.slice(0, current.length) + symbol);\r\n      } else {\r\n        // Otherwise remove all operators but the last, allows for  '5 * - + 5' to correctly evaluate to '10'\r\n        let count = 0;\r\n        for (let i = 0; i < current.length; i++) {\r\n          if (isNaN(+current[i])) {\r\n            count++;\r\n          } else {\r\n            count = 0;\r\n          }\r\n        }\r\n        setExpression(current.slice(0, current.length - count) + symbol);\r\n      }\r\n    } else {\r\n      // Ensures that any trailing decimal points are removed e.g. '10 + 5.' correctly evaluates to '15'\r\n      if (current) {\r\n        current = current + \"\";\r\n        let temp = current.split(/[\\+\\*\\/\\-]/g);\r\n        let lastNumber = temp[temp.length - 1];\r\n        if (!isNaN(+lastNumber) && /[\\.]/.test(lastNumber) && symbol === \".\") {\r\n          symbol = \"\";\r\n        }\r\n      }\r\n      // Replacing multiple 0s or multiple decimal points at beginning with just one\r\n      setExpression((current + symbol).replace(/^0/g, \"\").replace(/\\.+/g, \".\"));\r\n    }\r\n    setAnswer((current) =>\r\n      (current + symbol).replace(/^0/g, \"\").replace(/\\.+/g, \".\")\r\n    );\r\n  };\r\n\r\n  const calculate = (): void => {\r\n    setAnswer(eval(expression));\r\n    setExpression(eval(expression));\r\n  };\r\n\r\n  const clearAll = (): void => {\r\n    setExpression(\"\");\r\n    setAnswer(0);\r\n  };\r\n  const clear = (): void => {\r\n    setExpression(expression.substring(0, expression.length - 1));\r\n    setAnswer(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"grid\">\r\n          <div className=\"dis\">\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              value={expression}\r\n              placeholder=\"0\"\r\n              disabled\r\n            />\r\n            <div className=\"answer\" id=\"display\">\r\n              {answer}\r\n            </div>\r\n          </div>\r\n          <div onClick={clearAll} className=\"calcButton AC tomato\" id=\"clear\">\r\n            AC\r\n          </div>\r\n          <div onClick={clear} className=\"calcButton C tomato\">\r\n            C\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"/\")}\r\n            className=\"calcButton divide\"\r\n            id=\"divide\"\r\n          >\r\n            /\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"*\")}\r\n            className=\"calcButton multiply\"\r\n            id=\"multiply\"\r\n          >\r\n            X\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"7\")}\r\n            className=\"calcButton seven dark-grey\"\r\n            id=\"seven\"\r\n          >\r\n            7\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"8\")}\r\n            className=\"calcButton eight dark-grey\"\r\n            id=\"eight\"\r\n          >\r\n            8\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"9\")}\r\n            className=\"calcButton nine dark-grey\"\r\n            id=\"nine\"\r\n          >\r\n            9\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"-\")}\r\n            className=\"calcButton minus\"\r\n            id=\"subtract\"\r\n          >\r\n            -\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"4\")}\r\n            className=\"calcButton four dark-grey\"\r\n            id=\"four\"\r\n          >\r\n            4\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"5\")}\r\n            className=\"calcButton five dark-grey\"\r\n            id=\"five\"\r\n          >\r\n            5\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"6\")}\r\n            className=\"calcButton six dark-grey\"\r\n            id=\"six\"\r\n          >\r\n            6\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"+\")}\r\n            className=\"calcButton plus\"\r\n            id=\"add\"\r\n          >\r\n            +\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"1\")}\r\n            className=\"calcButton one dark-grey\"\r\n            id=\"one\"\r\n          >\r\n            1\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"2\")}\r\n            className=\"calcButton two dark-grey\"\r\n            id=\"two\"\r\n          >\r\n            2\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"3\")}\r\n            className=\"calcButton three dark-grey\"\r\n            id=\"three\"\r\n          >\r\n            3\r\n          </div>\r\n          <div\r\n            onClick={calculate}\r\n            className=\"calcButton equal blue\"\r\n            id=\"equals\"\r\n          >\r\n            =\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"0\")}\r\n            className=\"calcButton zero dark-grey\"\r\n            id=\"zero\"\r\n          >\r\n            0\r\n          </div>\r\n          <div\r\n            onClick={() => display(\".\")}\r\n            className=\"calcButton dot dark-grey\"\r\n            id=\"decimal\"\r\n          >\r\n            .\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
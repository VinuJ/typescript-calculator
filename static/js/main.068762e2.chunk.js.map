{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","expression","setExpression","answer","setAnswer","display","symbol","length","test","calculate","eval","clearAll","clear","substring","className","type","value","placeholder","disabled","onClick","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"62BA4BMA,IAAU,SAAVA,MACJ,cAAoCC,oDAAiB,IAArD,sLAAOC,WAAP,cAAmBC,cAAnB,cACA,WAA4BF,oDAAiB,GAA7C,uLAAOG,OAAP,cAAeC,UAAf,cAEMC,QAAU,SAACC,GACfJ,cAAcD,WAAaK,GACe,MAAtCL,WAAWA,WAAWM,OAAS,KAC7B,SAASC,KAAKF,GAChBJ,cAAcI,GAEdJ,cAAcC,OAASG,KAKvBG,UAAY,SAAZA,YACJL,UAAUM,KAAKT,aACfC,cAAcD,WAAa,MAGvBU,SAAW,WACfT,cAAc,IACdE,UAAU,IAENQ,MAAQ,WACZV,cAAcD,WAAWY,UAAU,EAAGZ,WAAWM,OAAS,IAC1DH,UAAU,IAGZ,OACE,kEAAKU,UAAU,MAAf,SACE,kEAAKA,UAAU,YAAf,SACE,mEAAKA,UAAU,OAAf,UACE,mEAAKA,UAAU,MAAf,UACE,oEACEA,UAAU,QACVC,KAAK,OACLC,MAAOf,WACPgB,YAAY,IACZC,UAAQ,IAEV,kEAAKJ,UAAU,SAAf,SAAyBX,YAE3B,kEAAKgB,QAASR,SAAUG,UAAU,uBAAuBM,GAAG,QAA5D,gBAGA,kEAAKD,QAASP,MAAOE,UAAU,sBAA/B,eAGA,kEACEK,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,oBACVM,GAAG,SAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,sBACVM,GAAG,WAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,6BACVM,GAAG,QAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,6BACVM,GAAG,QAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,4BACVM,GAAG,OAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,mBACVM,GAAG,WAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,4BACVM,GAAG,OAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,4BACVM,GAAG,OAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,2BACVM,GAAG,MAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,kBACVM,GAAG,MAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,2BACVM,GAAG,MAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,2BACVM,GAAG,MAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,6BACVM,GAAG,QAHL,eAOA,kEACED,QAASV,UACTK,UAAU,wBACVM,GAAG,SAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,4BACVM,GAAG,OAHL,eAOA,kEACED,QAAS,kBAAMd,QAAQ,MACvBS,UAAU,2BACVM,GAAG,UAHL,uBAaKrB,2B,gICrLAsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjC,EAAA,EAAD,MAEFkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.068762e2.chunk.js","sourcesContent":["import React, { FC, useState } from \"react\";\r\nimport \"./App.scss\";\r\n\r\n/*\r\n  <props that it takes>  - directly or INTERFACE\r\n  interface Props {\r\n    text: string; (boolean, number, (bob: syting) => void)\r\n    obj: {\r\n      f1: string'\r\n    }\r\n    or obj: SomeInterface\r\n  }\r\n\r\n  ctrl+space to see passable props + general auto complete\r\n\r\n  ? mark before colon means optional\r\n\r\n  useState default infers type, useState<number | null>\r\n  undefined different type to null\r\n\r\n  pass interfaces or objects into <>\r\n\r\n  e.g. useRef<HTMLInputElement>(null)\r\n\r\n  use hover a lot to get type\r\n  \r\n*/\r\n\r\nconst App: FC = () => {\r\n  const [expression, setExpression] = useState<string>(\"\");\r\n  const [answer, setAnswer] = useState<number>(0);\r\n\r\n  const display = (symbol: string): void => {\r\n    setExpression(expression + symbol);\r\n    if (expression[expression.length - 1] === \"=\") {\r\n      if (/[0-9.]/.test(symbol)) {\r\n        setExpression(symbol);\r\n      } else {\r\n        setExpression(answer + symbol);\r\n      }\r\n    }\r\n  };\r\n\r\n  const calculate = (): void => {\r\n    setAnswer(eval(expression));\r\n    setExpression(expression + \"=\");\r\n  };\r\n\r\n  const clearAll = (): void => {\r\n    setExpression(\"\");\r\n    setAnswer(0);\r\n  };\r\n  const clear = (): void => {\r\n    setExpression(expression.substring(0, expression.length - 1));\r\n    setAnswer(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"grid\">\r\n          <div className=\"dis\">\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              value={expression}\r\n              placeholder=\"0\"\r\n              disabled\r\n            />\r\n            <div className=\"answer\">{answer}</div>\r\n          </div>\r\n          <div onClick={clearAll} className=\"calcButton AC tomato\" id=\"clear\">\r\n            AC\r\n          </div>\r\n          <div onClick={clear} className=\"calcButton C tomato\">\r\n            C\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"/\")}\r\n            className=\"calcButton divide\"\r\n            id=\"divide\"\r\n          >\r\n            /\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"*\")}\r\n            className=\"calcButton multiply\"\r\n            id=\"multiply\"\r\n          >\r\n            X\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"7\")}\r\n            className=\"calcButton seven dark-grey\"\r\n            id=\"seven\"\r\n          >\r\n            7\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"8\")}\r\n            className=\"calcButton eight dark-grey\"\r\n            id=\"eight\"\r\n          >\r\n            8\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"9\")}\r\n            className=\"calcButton nine dark-grey\"\r\n            id=\"nine\"\r\n          >\r\n            9\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"-\")}\r\n            className=\"calcButton minus\"\r\n            id=\"subtract\"\r\n          >\r\n            -\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"4\")}\r\n            className=\"calcButton four dark-grey\"\r\n            id=\"four\"\r\n          >\r\n            4\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"5\")}\r\n            className=\"calcButton five dark-grey\"\r\n            id=\"five\"\r\n          >\r\n            5\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"6\")}\r\n            className=\"calcButton six dark-grey\"\r\n            id=\"six\"\r\n          >\r\n            6\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"+\")}\r\n            className=\"calcButton plus\"\r\n            id=\"add\"\r\n          >\r\n            +\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"1\")}\r\n            className=\"calcButton one dark-grey\"\r\n            id=\"one\"\r\n          >\r\n            1\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"2\")}\r\n            className=\"calcButton two dark-grey\"\r\n            id=\"two\"\r\n          >\r\n            2\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"3\")}\r\n            className=\"calcButton three dark-grey\"\r\n            id=\"three\"\r\n          >\r\n            3\r\n          </div>\r\n          <div\r\n            onClick={calculate}\r\n            className=\"calcButton equal blue\"\r\n            id=\"equals\"\r\n          >\r\n            =\r\n          </div>\r\n          <div\r\n            onClick={() => display(\"0\")}\r\n            className=\"calcButton zero dark-grey\"\r\n            id=\"zero\"\r\n          >\r\n            0\r\n          </div>\r\n          <div\r\n            onClick={() => display(\".\")}\r\n            className=\"calcButton dot dark-grey\"\r\n            id=\"decimal\"\r\n          >\r\n            .\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}